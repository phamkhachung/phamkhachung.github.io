[{"authors":null,"categories":null,"content":"Ngày nay, Python là một trong những ngôn ngữ lập trình được các lập trình viên yêu thích và sử dụng nhiều nhất. Nhiều doanh nghiệp và người khổng lồ trong ngành Phần mềm đã chọn python làm ngôn ngữ để lập trình.\nTại sao lại chọn Python? Python có một số điểm nổi bật khiến nó được nhiều công ty và lập trình viên lựa chọn:\n Miễn phí: Python là một ngôn ngữ mã nguồn mở và nó miễn phí. Tất cả các công cụ cần thiết cho lập trình python như bộ công cụ phát triển, môi trường phát triển, các phương tiện hỗ trợ, và thư viện sử dụng hoàn toàn miễn phí và hỗ trợ trên mọi hệ điều hành phổ biến. Mã nguồn ngắn: Python có cú pháp rất đơn giản và gần gũi với ngôn ngữ tự nhiên. Đôi khi nếu bạn cần 10 dòng mã trong ngôn ngữ C++ thì chỉ cần 4 dòng trong Python để thực thi cùng một tác vụ. Ví dụ để đảo giá trị 2 biến ta chỉ đơn giản viết: a, b = b, a. Điều mà ở đa phần các ngôn ngữ khác chúng ta cần đến ít nhất 4 dòng lệnh. Có mã nguồn ít hơn sẽ yêu cầu ít không gian lưu trữ hơn, ít thời gian viết mã hơn, thời gian kiểm thử và sửa lỗi cũng sẽ ít hơn nên Python được các lập trình viên đánh giá cao. Python còn cung cấp rất nhiều thư viện và thư viện tích hợp giúp lập trình viên tiết kiệm thời gian viết mã hơn, do đó, giúp giảm chi phí và mang lại nhiều lợi nhuận hơn. Phù hợp với công ty khởi nghiệp: Khả năng tạo ứng dụng và phần mềm nhanh chóng và ít tốn kém giúp Python phù hợp nhất với các công ty khởi nghiệp, vì chúng có thể tồn tại trong môi trường cạnh tranh cao bằng cách tận dụng tốc độ của ngôn ngữ Python. Python không chỉ phù hợp với các công ty vừa và nhỏ, mà các công ty hàng đầu như Google, Spotify, Instagram và Dropbox, cũng chứng minh cho sự phát triển của Python so với các ngôn ngữ khác. NASA, Electronic Arts và Disney là những người khổng lồ ngoài ngành CNTT đã chọn Python. Xu hướng trong lập trình: Mặc dù Java, C/C++, Javascript vẫn đang thống trị nhưng với lợi ích nêu trên cộng với sự nổi lên của trí tuệ nhân tạo (artificial intelligence - AI) trong những năm vừa qua mà Python là ngôn ngữ phổ biến nhất trong lĩnh vực này thì Python hiện tại đang trở thành ngôn ngữ lựa chọn cho rất nhiều mục đích: làm quen lập trình, lập trình web, lập trình back-end, lập trình IOT, lập trình AI, v.v\u0026hellip;  Nhược điểm của Python là gì? Bên cạnh những điểm mạnh tuyệt vời kể trên thì Python cũng tồn tại những điểm yếu:\n Chậm: Là một ngôn ngữ thông dịch, khi so sánh với một ngôn ngữ biên dịch, tốc độ thực thi của Python thường chậm hơn nhất là đối với các ứng dụng liên quan đến tập dữ liệu lớn hay toán học phức tạp. Bảo mật mã nguồn kém: Nhược điểm thứ hai của python là bảo vệ mã nguồn. Do Python là ngôn ngữ thông dịch nên hệ điều hành biên dịch mã nguồn ra mã máy tại thời điểm thực thi nên chúng ta phải lưu trữ mã nguồn ở máy thực thi. Việc này khiến mã nguồn dễ rơi vào tay những kẻ tò mò. Hiện tại có những công cụ để đóng gói mã Python thành gói thực thi để giảm thiểu việc đọc mã nguồn. Không hỗ trợ đa luồng (multi-threading): Đa luồng không được Python hỗ trợ, điều này hạn chế hiệu năng của Python. Python có giới hạn này vì đồng hồ thông dịch toàn cầu (GIL). Nó chỉ cho phép một luồng thực thi tại một thời điểm. Các chương trình đơn luồng chậm hơn so với các chương trình đa luồng. Tuy nhiên, tình huống này có thể được xử lý bằng cách sử dụng các ứng dụng đa xử lý (multi-processing) thay cho các chương trình đa luồng. Tiềm ẩn lỗi: Là một ngôn ngữ kiểu động, tức kiểu dữ liệu của biến không được khai báo tường minh và cố định. Một biến trong Python có thể có nhiều kiểu dữ liệu khác nhau tại các thời điểm thực thi khác nhau. Việc này tiềm ẩn nhiều lỗi mà chỉ phát hiện khi thực thi.  Python phù hợp cho những ai? Python hỗ trợ lập trình từ thiết bị IOT, ứng dụng di động, ứng dụng web, lập trình logic cho đến AI, khoa học dữ liệu, v.v\u0026hellip; Nhưng với những ưu và nhược điểm nêu trên, Python phù hợp nhất cho các nhóm sau:\n Làm quen lập trình: Là ngôn ngữ có cú pháp đơn giản, dễ học, Python phù hợp cho các bạn mới làm quen lập trình để hiểu các khái niệm trong lập trình và dễ dàng tạo ra các ứng dụng mà không tốn quá nhiều thời gian và đau đầu với những mã nguồn phức tạp. Lập trình devops: Python giúp xây dựng nhanh chóng các công cụ quản lý, thực thi các tác vụ hệ thống với nguồn thư viện dồi dào mà nó cung cấp. Các công cụ này thường ít đặt nặng tốc độ thực thi và bảo mật mã nguồn nhưng đòi hỏi triển khai nhanh nên khá phù hợp khi lựa chọn Python. Lập trình AI: Các lĩnh vực như lập trình ngôn ngữ tự nhiên (natural language processing - NLP), thị giác máy tính (computer vision), hay khoa học dữ liệu (data science), v.v\u0026hellip; đều có rất nhiều thư viện hỗ trợ viết bằng Python nên Python trở thành ngôn ngữ phổ biến nhất trong lập trình AI dù nhược điểm thực thi chậm đang khiến các lập trình viên không hài lòng nhất là với những tác vụ cần xử lý lượng dữ liệu lớn hay tính toán phức tạp.  Học gì với Python? Trong phần này, chúng tôi chỉ giới những kiến thức thật sự cơ bản về Python. Bên cạnh đó, chúng tôi cũng bổ sung thêm 1 số kiến thức để phục vụ cho các tác vụ xử lý dữ liệu trong Khoa học dữ liệu mà chúng tôi sẽ giới thiệu sau này. Nội dung bao gồm:\n Cài đặt Python Kiểu dữ liệu trong Python Cú pháp cơ bản Hàm [Đóng gói package, module] [Lập trình hướng đối tượng] [Lập trình web service] Các thư viện cơ bản thường dùng trong Khoa học dữ liệu:  [Numpy] [Pandas] [SciPy] [Scikit-Learn] [Matplotlib] [Seaborn]    Cách học Có nhiều cách tiếp cận tài liệu này, ở đây chúng tôi nêu một số cách như sau:\n Bạn chưa biết gì về lập trình hoặc Python: nên đọc từ đầu, từng bài và sau đó làm bài tập. Bạn đã biết sơ Python: nên đọc phần đề mục bên tay phải từng bài sau đó xem tóm tắt từng bài trước, nếu bạn đã nắm thì không cần đọc chi tiết các mục mà vào thẳng phần làm bài tập. Phần nào không làm được hãy quay lại đọc về phần đó. Bạn đã có kinh nghiệm Python: nên xem mục lục bên trái và chọn bài mà bạn thấy hứng thú hoặc nhảy đến phần các thủ thuật Python để tìm hiểu thêm. Khi các bạn gặp vấn đề cài đặt, làm bài tập không được, hoặc cần trao đổi vấn đề nào đó liên quan Python, đừng ngần ngại gửi mail cho tôi hoặc tham gia kênh trao đổi về python tại telegram. Tóm tắt     Ưu điểm của Python: miễn phí, cú pháp đơn giản, lập trình nhanh, phù hợp các công ty khởi nghiệp và là xu hướng trong lập trình. Nhược điểm: chậm, không bảo mật mã nguồn, không hỗ trợ lập trình đa luồng và tiềm ẩn lỗi. Python phù hợp nhất cho nhóm làm quen lập trình, lập trình devops và lập trình AI.    ","date":1585717200,"expirydate":-62135596800,"kind":"section","lang":"vi","lastmod":1585719000,"objectID":"298ad7f7e1cf34d15656d8b0546e7486","permalink":"/courses/python/","publishdate":"2020-04-01T12:00:00+07:00","relpermalink":"/courses/python/","section":"courses","summary":"Kiến thức lập trình Python cơ bản.","tags":null,"title":"Lập trình Python cơ bản","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"section","lang":"vi","lastmod":1557010800,"objectID":"d4f3cabe6cb8898bf271a5aa574751dc","permalink":"/courses/go/intro/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/intro/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Introduction","type":"docs"},{"authors":null,"categories":null,"content":"Đây là những ebook tôi thu thập được từ rất nhiều nguồn trong suốt thời gian dài. Các ebook này không bao quát tất cả các lĩnh vực mà chỉ tập trung ở một số lĩnh vực tôi quan tâm. Tất cả các ebook này đều ở dạng pdf hoặc link youtube. Trong trường hợp ai cần định dạng khác có thể đổi tại đây.\nMột số lượng ebook do chưa chuyển định dạng hoặc chưa chuẩn hóa xong nên tôi sẽ đưa lên dần. Trong trường hợp ai cần ebook nào có thể gửi mail cho tôi, tôi sẽ gửi trước hoặc kiếm phụ nếu chưa có.\nTrong trường hợp có ebook nào tác giả không cho phép xuất bản dưới dạng này mà bị tạo bất hợp pháp hoặc dính đến bản quyền, tôi sẽ xóa bỏ khi được thông báo. Hy vọng những ebook này giúp mọi người có thêm một nguồn tham khảo.\nMọi liên hệ xin gửi email cho tôi.\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"vi","lastmod":1536451200,"objectID":"e00979934536aaa2b90eda670424d0d5","permalink":"/ebooks/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ebooks/","section":"ebooks","summary":"Learn how to use Academic's docs layout for publishing online courses, software documentation, and tutorials.","tags":null,"title":"Giới thiệu","type":"docs"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"vi","lastmod":1536451200,"objectID":"c9ba72c8aa5f2163bbe234056aa6a986","permalink":"/courses/go/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/go/","section":"courses","summary":"Các kiến thức cần thiết để lập trình với ngôn ngữ Go.","tags":null,"title":"Lập trình Go","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"section","lang":"vi","lastmod":1557010800,"objectID":"90e050c76e91d161dc77d08b5186a8f0","permalink":"/courses/go/basic/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/basic/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Basic","type":"docs"},{"authors":null,"categories":null,"content":"Python là ngôn ngữ lập trình thông dịch cao cấp và đa nền tảng được phát triển bởi Guido van Rossum vào năm 1991. Nó được sử dụng trong nhiều lĩnh vực từ phát triển web, ứng dụng văn phòng, IOT cho đến các ứng dụng khoa học. Đặc trưng của Python như đơn giản, dễ học, cú pháp thân thiện với ngôn ngữ con người và dễ dàng mở rộng sang các ngôn ngữ khác. Ngoài các thư viện tích hợp sẵn hoặc tiêu chuẩn tạo thành thư viện chuẩn Python, Python cũng cung cấp hỗ trợ rất nhiều thư viện của bên thứ ba. Nó hỗ trợ nhiều kiểu lập trình như Hướng đối tượng, Thủ tục và Chức năng.\nPhiên bản đầu tiên của Python là phiên bản 0.9 ra đời tháng 2 năm 1991. Tên Python được lấy cảm hứng từ nhóm hài của Anh là Monty Python. Năm 2008 đánh dấu bước phát triển song song giữa 2 phiên bản 2.x và 3.x. Xuất phát điểm việc tách ra là phiên bản 3.0 ra đời tháng 12 năm 2008 hỗ trợ Unicode mặc định. Mặc dù mã được phát triển ở hai phiên bản khá tương thích với nhau trừ một số thay đổi nhưng nó cũng khiến nhiều người dùng Python bối rối do không biết theo nhánh nào và đôi lúc gặp phải sự cố không tương thích. Phiên bản mới nhất của Python 2.x là Python 2.7 còn 3.x là 3.8. Sau năm 2020 thì Python 2.x sẽ không còn được tiếp tục phát triển nữa.\nTrong chuỗi bài này, chúng tôi sẽ chỉ sử dụng Python 3.x nên khi chỉ nói Python, chúng tôi đang đề cập đến Python 3.x.\nTóm tắt   Python là ngôn ngữ thông dịch. Python có 2 nhánh phiên bản chạy song song là 2.x và 3.x. Từ 2020, nhánh 2.x ngừng phát triển. Phiên bản mặc định trong các bài tiếp theo là 3.x    ","date":1586008800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586008800,"objectID":"c05de2135f44fe3bce5aba5671b2a24e","permalink":"/courses/python/introduction/","publishdate":"2020-04-04T21:00:00+07:00","relpermalink":"/courses/python/introduction/","section":"courses","summary":"Python là ngôn ngữ lập trình thông dịch cao cấp và đa nền tảng được phát triển bởi Guido van Rossum vào năm 1991. Nó được sử dụng trong nhiều lĩnh vực từ phát triển web, ứng dụng văn phòng, IOT cho đến các ứng dụng khoa học.","tags":null,"title":"Giới thiệu Python","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"3b712f860fa22e6d32e2444dcb66aaa5","permalink":"/courses/go/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/example1/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Để lập trình được Python, đầu tiên chúng ta phải cài đặt bộ công cụ phát triển (software development kit - SDK) chứa file thực thi dịch mã nguồn chúng ta viết ra mã mãy để chạy và các thư viện viết sẵn giúp chúng ta sử dụng để tiết kiệm thời gian lập trình. Sau SDK, chúng ta cần môi trường phát triển tích hợp (integrated development environment - IDE) cung cấp công cụ soạn thảo, kiểm lỗi, v.v\u0026hellip; trong quá trình lập trình. Có nhiều bộ cài đặt SDK và IDE cho Python khác nhau nhưng trong bài này chúng ta sẽ tìm hiểu bộ Anacoda và Google Colab.\nCài đặt Anaconda Công cụ Anaconda là cách dễ nhất để cài đặt Python và các thư viện. Với hơn 19 triệu người dùng trên toàn thế giới, Anaconda cung cấp cài đặt Python, quản lý hàng ngàn thư viện phục vụ cho nhiều nhu cầu lập trình khác nhau.\nAnaconda hỗ trợ gói cài đặt cho 3 hệ điều hành Windows, Linux và macOS tại đây. Vui lòng chọn đúng gói cài đặt phù hợp với hệ điều hành trên máy của bạn. Với các máy Windows, các bạn chỉ đơn giản thực thi file download và làm theo hướng dẫn. Với các hệ điều hành macOS và Linux bạn có thể thực hiện lệnh bash \u0026lt;file download .sh\u0026gt; ở Terminal và làm theo hướng dẫn:\n   bash \u0026lt;file download .sh\u0026gt;\n Sử dụng Jupyter Notebook Jupyter Notebook là một ứng dụng web mã nguồn mở cho phép bạn tạo hoặc chia sẻ những văn bản chứa mã nguồn, tài liệu hoặc mô phỏng. Jupyter Notebook là một công cụ tuyệt vời để trải nghiệm khoa học dữ liệu bởi nó có thể giúp chúng ta:\n Học và thử nghiệm với Python Xử lý, biến đổi dữ liệu Trình diễn, mô phỏng dữ liệu dưới dạng biểu đồ Thực hiện mô hình hóa dữ liệu với các thuật toán học máy  Jupyter Notebook được tích hợp sẵn trong Anaconda nên sau khi cài đặt xong Anaconda, chúng ta có thể thực thi Jupyter Notebook bằng cách chọn từ Start Menu trong Windows hay chạy dòng lệnh sau trong Terminal/Command Prompt trên các hệ điều hành:\n   jupyter notebook\n Nếu việc cài đặt thành công, Jupyter Notebook sẽ thực thi và mở 1 trang web cục bộ ở trình duyệt như hình bên dưới: Chọn New ở góc trên bên phải và chọn Python 3, tab mới được tạo như bên dưới cho chúng ta biết chúng ta đã có một môi trường để viết code và thử nghiệm Python 3 cũng như các dự án Khoa học dữ liệu sau này:  Một notebook bao gồm nhiều ô (cell). Khi tạo mới một notebook, bạn luôn được tạo sẵn một ô rỗng đầu tiên:  Ô trên có kiểu là “Code” như trong hình, điều đó có nghĩa là bạn có thể gõ code Python và thực thi ngay lập tức. Để thực thi code, bạn có thể nhấn nút Run cell hoặc nhấn Ctrl + Enter hoặc Shift + Enter để thực thi và mở ô mới.  Bạn có thể chuyển loại ô từ Code thành Markdown để viết những đoạn văn bản giải thích code của bạn chẳng hạn. Để chuyển đổi bạn click vào ComboBox Code và chọn Markdown như hình:  Để tiện việc sử dụng notebook, bạn nên tham khảo danh sách các phím tắt bằng việc vào Help-\u0026gt; Keyboard Shortcuts để tham khảo:  Đổi tên notebook bằng cách chọn vào tên file để đổi, như trong hình đầu tiên là Untitled5. Một trong những chức năng cực hay của Jupyter Notebook là Checkpoints. Bằng cách tạo các Checkpoints lưu trạng thái hiện tại của notebook, Jupyter Notebook cho phép bạn có thể quay lại thời điểm tạo Checkpoints để kiểm tra hoặc hoàn tác trước đó. Để tạo Checkpoint, chọn File -\u0026gt; Save and Checkpoint. Nếu bạn muốn xem lại các Checkpoints trước đó thì chọn File -\u0026gt; Revert to Checkpoint. Jupyter Noteboook cho phép bạn export notebook của bạn ra một vài loại file như: PDF, HTML, . . . Để làm được điều đó, bạn chọn File-\u0026gt;Download as   Sử dụng Google Colab Google colab khá giống với Jupyter Notebook nên bạn sẽ không bỡ ngỡ khi sử dụng Colab. Google Colab là dự án miễn phí của Google cung cấp cung cụ giúp chúng ta thực hiện các dự án Khoa học dữ liệu với nguồn tài nguyên của Google. Với những máy tính cá nhân thì việc cần GPU để huấn luyện là chuyện không dễ dàng nên Google Colab giúp chúng ta giải tỏa nỗi lo này.\nGoogle Colab được tích hợp trong Google Drive. Nếu lần đầu bạn sử dụng Colab ở Drive của mình thì bạn cần phải cài đặt nó bằng cách thực hiện các bước sau ở Google Drive của bạn:\n Chọn Mới (New) -\u0026gt; Ứng dụng khác (More) -\u0026gt; Kết nối ứng dụng khác (Connect more apps). Tìm kiếm Google Colab và chọn Kết nối (Connect) với ứng dụng Colaboratory tại cửa sổ popup   Bây giờ bạn hãy đến thư mục mà bạn dự định lưu các file được tạo bởi Colab, thực hiện thao tác như ở trên nhưng thay vì kết nối ứng dụng khác thì chúng ta chọn Google Colaboratory có sẵn trong danh sách. Các chức năng trên Google Colab tương tự như Jupyter Notebook nên tôi để bạn tự khám phá nhé.\nTóm tắt   Anaconda là bộ công cụ hỗ cài đặt Python và rất nhiều thư viện. Jupyter Notebook là trang web chạy local hỗ trợ soạn thảo và thực thi mã Python và có thể lưu thành một báo cáo hoàn chỉnh. Jupyter Notebook đi kèm trong bộ Anacoda. Google Colab là công cụ tương tự Jupyter Notebook nhưng được tích hợp sẵn trong Google Drive.    ","date":1586037600,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586037600,"objectID":"7f49c7d0a16215c4d6de9584feafdbbc","permalink":"/courses/python/installation/","publishdate":"2020-04-05T05:00:00+07:00","relpermalink":"/courses/python/installation/","section":"courses","summary":"Để lập trình được Python, đầu tiên chúng ta phải cài đặt bộ công cụ phát triển (software development kit - SDK) chứa file thực thi dịch mã nguồn chúng ta viết ra mã mãy để chạy và các thư viện viết sẵn giúp chúng ta sử dụng để tiết kiệm thời gian lập trình.","tags":null,"title":"Cài đặt Python","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"6dd7ec62bd6b29c703cbc95a00194a23","permalink":"/courses/go/intro/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/intro/example1/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Introduction","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"0b38894242b27bd37418e11df801bd4d","permalink":"/courses/go/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"0669b63d5738b451fdb4b0d4ac1353a6","permalink":"/courses/go/intro/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/intro/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Introduction","type":"docs"},{"authors":null,"categories":null,"content":"Trước khi tìm hiểu các khái niệm biến, kiểu dữ liệu hay cú pháp, hàm, chúng ta sẽ tìm hiểu và thống nhất một số khái niệm cơ bản trong Python.\nTừ khóa Từ khóa (keyword) là những từ dành riêng trong Python. Chúng ta không thể sử dụng từ khóa làm tên biến, tên hàm hoặc bất kỳ định danh nào khác. Chúng được sử dụng để xác định cú pháp và cấu trúc của ngôn ngữ Python. Trong Python, từ khóa phân biệt chữ hoa chữ thường. Sau đây là danh sách 33 từ khóa trong Python 3.7. Con số này có thể thay đổi một chút theo thời gian: Định danh Định danh (identifier) là tên được đặt cho các thực thể như biến, hàm, lớp, v.v \u0026hellip; Nó giúp phân biệt một thực thể này với thực thể khác. Quy tắc khai báo định danh như sau:\n Định danh có thể là sự kết hợp của các chữ cái viết thường (a đến z) hoặc chữ hoa (A đến Z) hoặc chữ số (0 đến 9) hoặc dấu gạch dưới _. Các ký tự đặc biệt khác đều không thể dùng để tạo định danh. Các tên như myClass, var_1 và print_this_to_screen, tất cả đều là định danh hợp lệ. Một định danh không thể bắt đầu bằng một chữ số. 1var không hợp lệ, nhưng var1 là tên hợp lệ. Từ khóa không thể được sử dụng để khai báo định danh. Chiều dài định danh không giới hạn nhưng tốt nhất nên đặt tên có ý nghĩa liên quan đến mục đích sử dụng. Python phân biệt định danh viết hoa và thường nên my_class và My_class là 2 định danh khác nhau. Với định danh gồm nhiều từ ghép lại thì dùng dấu gạch dưới (_) để nối các từ (theo phong cách snake). Ví dụ: my_name.  Câu lệnh Một câu lệnh (statement) trong Python là một chuỗi ký tự kết thúc bằng ký tự xuống dòng theo đúng cú pháp sao cho Python có thể thông dịch ra ngôn ngữ máy và thực thi được. Ví dụ:\nx = 1  là một câu lệnh gán giá trị 1 cho biến x trong Python. Như vậy khác với đa số ngôn ngữ khác dùng dấu chấm phẩy (;) để kết thúc câu lệnh, Python không quy định ký tự kết thúc câu lệnh.\nTrường hợp muốn tạo câu lệnh nhiều dòng, chúng ta dùng ký tự \\ kết thúc mỗi dòng hoặc có thể sử dụng các cặp dấu gom nhóm như cặp (), [], {}. Ví dụ:\nx = 1 + 2 + 3 + \\ 4 + 5 + 6 + \\ 7 + 8 + 9 y = (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9) colors = ['red', 'blue', 'green']  Liệu chúng ta có thể tạo nhiều câu lệnh trên một dòng không? Câu trả lời là được. Lúc đó mỗi câu lệnh cách nhau bằng dấu (;) như thường thấy ở các ngôn ngữ khác.\nKhối lệnh Khối lệnh (code block) là để chỉ các câu lệnh có cùng 1 phạm vi ảnh hưởng như khối lệnh trong hàm hay câu điều kiện if (sẽ tìm hiểu sau). Thường các ngôn ngữ sử dụng cặp begin end hay {} để mở và đóng khối lệnh. Tuy nhiên Python không dùng đến chúng mà quy định dấu hai chấm (:) và thụt đầu dòng (indentation). Các câu lệnh cùng có một mức thụt đầu dòng như nhau sẽ cùng một khối lệnh. Một số lập trình viên dùng tab để thụt đầu dòng nhưng tab có thể quy định tương ứng số khoảng trắng khác nhau nên tốt nhất dùng 4 khoảng trắng để thực hiện một cấp thụt đầu dòng. Trong các phần sau chúng ta sẽ thấy rõ ví dụ về khối lệnh và thụt đầu dòng.\nGhi chú Ghi chú (comment) là rất quan trọng trong lập trình. Nó giúp chúng ta mô tả những gì đang diễn ra bên trong một chương trình, để một người nhìn vào mã nguồn có thể hiểu logic nhờ những mô tả này. Chúng ta có thể quên các chi tiết chính của chương trình vừa viết sau một vài tháng nên tốt nhất chúng ta nên dành thời gian để giải thích các đoạn mã thông qua ghi chú.\nPython sử dụng dấu thăng (#) để bắt đầu viết ghi chú. Nếu ghi chú nhiều dòng, mỗi dòng sẽ bắt đầu bằng một dấu thăng. Ví dụ:\n# Đây là ghi chú # xuất ra màn hình chuỗi Hello print('Hello')  Python sử dụng cặp \u0026ldquo;\u0026quot;\u0026quot;\u0026hellip;\u0026rdquo;\u0026rdquo;\u0026rdquo; để tạo chuỗi tài liệu. Nó nằm ngay dưới khai báo hàm, phương thức, lớp hay module để sinh tài liệu mã nguồn một cách tự động khi cần. Ví dụ:\ndef double(num): \u0026quot;\u0026quot;\u0026quot;Hàm thực hiện nhân đôi giá trị\u0026quot;\u0026quot;\u0026quot; return 2*num  Tóm tắt   Từ khóa được Python dành riêng để quy định khai báo và cú pháp, chúng ta không thể dùng để đặt tên trong chương trình. Định danh là tên khai báo trong Python gồm chữ cái, số và ký tự gạch dưới, trong đó số không được phép dùng để bắt đầu tên. Python phân biệt định danh hoa và thường. Câu lệnh Python không cần ký tự kết thúc lệnh. Khối lệnh là nhóm câu lệnh liên tiếp có cùng mức thụt đầu dòng. Ghi chú dùng để bổ sung thông tin trong chương trình mà Python sẽ không biên dịch. Ghi chú bắt đầu bằng dấu #.    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"d1f6b108e13ce55862b4e4eb8fe735b7","permalink":"/courses/python/basic/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/python/basic/","section":"courses","summary":"Trước khi tìm hiểu các khái niệm biến, kiểu dữ liệu hay cú pháp, hàm, chúng ta sẽ tìm hiểu và thống nhất một số khái niệm cơ bản trong Python.","tags":null,"title":"Khái niệm cơ bản trong Python","type":"docs"},{"authors":null,"categories":null,"content":"Chuỗi giá trị Chuỗi giá trị (literal) là một chuỗi số hay chuỗi ký tự lưu trong vùng nhớ chương trình khi chạy. Các loại chuỗi giá trị cơ bản trong Python như sau:\n Chuỗi số (numeric literal): là số nguyên, số thực hay số phức. Ví dụ: 1, -3.5, 3 + 4j Chuỗi ký tự (string literal): là nhóm ký tự Unicode được bọc trong cặp nháy đơn (') hoặc nháy kép (\u0026quot;). Chuỗi nhiều dòng có thể được biểu thị bằng cách sử dụng ba dấu nháy đơn (''') hoặc ba nháy kép (\u0026quot;\u0026quot;\u0026quot;). Ví dụ: \u0026lsquo;Hello\u0026rsquo;, \u0026ldquo;Python\u0026rdquo;, \u0026ldquo;\u0026ldquo;\u0026ldquo;Hello Python\u0026rdquo;\u0026rdquo;\u0026rdquo; Chuỗi luận lý (boolean literal): gồm True (đại diện cho đúng) và False (đại diện cho sai). Trong Python thì True tương đương 1 và False tương đương 0 nên True + 4 sẽ cho kết quả là 5 còn 10 - False thì vẫn là 10. Chuỗi None: Python dùng None thay vì dùng void, nil hay null như các ngôn ngữ khác để thể hiện giá trị rỗng.  Chuỗi giá trị được dùng để khai báo giá trị cho các biến số và hằng số như bên dưới.\nBiến số Biến số là định danh gắn với một đối tượng chứa dữ liệu (là chuỗi giá trị hay tập hợp chuỗi giá trị) tương ứng. Ví dụ:\nx = 5 x = 7.5   Dòng lệnh trên đồng nghĩa tạo một biến có tên là x và được gán (biểu thị qua dấu bằng (=)) đối tượng chứa giá trị 5. Dòng lệnh dưới cho biết biến x lúc này sẽ được gắn với đối tượng có giá trị là 7.5.  Python là ngôn ngữ thông dịch nên mang một số đặc điểm khác với các ngôn ngữ biên dịch:\n Không cần khai báo biến trước, biến sẽ được tạo ở lần đầu tiên chúng được gán giá trị. Biến không thật sự gắn với giá trị chúng được gán mà là gắn với đối tượng quản lý giá trị đó. Tuy vậy để cho đơn giản ta vẫn gọi là biến x có giá trị 5 như trong ví dụ trên. Chi tiết sẽ nói rõ hơn ở bài sau. Do không gắn trực tiếp giá trị nó được gán nên biến x dễ dàng thay đổi từ số nguyên (5) sang số thực (7.5) như trên. Mỗi lần gán giá trị biến sẽ được gắn với đối tượng mới, đối tượng cũ sẽ được bộ dọn rác (garbage collector) dọn tự động nên chúng ta cũng không cần quan tâm đến giải phóng bộ nhớ.  Có thể gán nhiều biến cùng lúc với một hoặc nhiều chuỗi giá trị:\nx, y, z = 1, 5.6, \u0026quot;abc\u0026quot; a = b = c = True   Dòng lệnh trên biến x, y, z lần lượt có giá trị là 1, 5.6, \u0026ldquo;abc\u0026rdquo;. Dòng lệnh dưới cả 3 biến a, b, c đều có giá trị là True.  Hằng số Khác với biến số có thể gán thay đổi giá trị nhiều lần, hằng số (constant) một khi đã gán giá trị là không thay đổi được nữa. Python thật sự không có khái niệm hằng số. Thông thường để khai báo các biến giá trị không thay đổi thì chúng ta khai báo tên toàn chữ in hoa. Ví dụ:\nPI = 3.14 GRAVITY = 9.8  Hàm và phương thức Trong các bài tới chúng ta sẽ gặp nhiều hàm và phương thức hệ thống tạo sẵn phục vụ nhu cầu xử lý các loại kiểu dữ liệu khác nhau. Để tiện theo dõi, phần này chúng tôi giới thiệu sơ về hàm và phương thức để các bạn dễ hình dung.\nHàm là một nhóm các câu lệnh mà chỉ được thực thi khi hàm được gọi. Hàm gồm có tên và các tham số truyền thông tin vào hàm và dữ liệu trả về là kết quả xử lý hàm. Như vậy để sử dụng hàm cần thực hiện 2 bước là khai báo hàm và gọi hàm ở nơi cần thực thi.\nCó 3 nhóm hàm khác nhau:\n Hàm hệ thống: làm hàm được cung cấp sẵn trong các phiên bản Python. Chúng ta có thể sử dụng mà chẳng cần khai báo thông tin gì về nó cả. Hàm tự tạo: là hàm do chúng ta viết trong chương trình của mình. Hàm bên thứ 3 tạo: là hàm do người khác viết và cung cấp sẵn trên các kho chứa mã nguồn như github mà chúng ta có thể sử dụng thay vì tự viết lại. Chúng ta phải khai báo về nó trước khi sử dụng.  Chi tiết về hàm chúng ta sẽ tìm hiểu kỹ hơn ở đây.\nPhương thức là khái niệm trong lập trình hướng đối tượng. Nó mô tả hành động của đối tượng mà cách khai báo và gọi thực thi khá giống với hàm. Nói cách khác phương thức là hàm trong thế giới hướng đối tượng. Do phục vụ cho đối tượng nên khai báo phương thức phải mô tả nó thuộc lớp nào và để gọi nó thực thi phải gọi từ đối tượng thuộc lớp đó. Chi tiết về phương thức chúng ta sẽ tìm hiểu kỹ hơn ở đây.\nHàm print Python cung cấp hàm print() để in giá trị của biến hoặc chuỗi giá trị ra màn hình. Hàm print rất tùy biến giúp chúng ta in ra nhiều thông tin khá linh hoạt:\nver = 3.8 print(\u0026quot;Hello Python!\u0026quot;) # Hello Python! print(\u0026quot;Hello Python\u0026quot;, \u0026quot;for\u0026quot;, \u0026quot;Data science!\u0026quot;) # Hello Python for Data science! print(\u0026quot;Hello Python\u0026quot;, ver) # Hello Python 3.8 print(f\u0026quot;Hello Python {ver}\u0026quot;) # Hello Python 3.8  Tóm tắt   Chuỗi giá trị (literal) là một chuỗi số hay chuỗi ký tự lưu trong vùng nhớ khi thực thi chương trình. Có 4 loại chuỗi giá trị: số, chuỗi, luận lý và None. Biến số là định danh gắn với 1 đối tượng chứa giá trị. Biến trong Python không cần khai báo trước, có thể gán lại giá trị nhiều loại dữ liệu khác nhau. Python có bộ dọn rác tự động. Python không có khái niệm hằng số riêng mà dùng định danh toàn chữ hoa để khai báo hằng số, là biến số có giá trị cố định. Hàm là khối lệnh được khai báo sẵn nhưng chỉ được thực thi khi gọi nó. Hàm có tên, các tham số và các giá trị trả về. Hàm print() dùng để in giá trị ra màn hình với nhiều định dạng khác nhau.    ","date":1586264400,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586264400,"objectID":"d612781910153999e494a862a667c089","permalink":"/courses/python/variable/","publishdate":"2020-04-07T20:00:00+07:00","relpermalink":"/courses/python/variable/","section":"courses","summary":"Chuỗi giá trị Chuỗi giá trị (literal) là một chuỗi số hay chuỗi ký tự lưu trong vùng nhớ chương trình khi chạy. Các loại chuỗi giá trị cơ bản trong Python như sau:","tags":null,"title":"Biến số và hằng số","type":"docs"},{"authors":null,"categories":null,"content":"Trong lập trình máy tính, một kiểu dữ liệu (data type) là một cách phân loại dữ liệu cho trình biên dịch hoặc thông dịch hiểu các lập trình viên muốn sử dụng loại dữ liệu gì. Trong bài trước chúng ta đã tìm hiểu về các loại chuỗi giá trị và từng loại chuỗi giá trị cũng như kết hợp các chuỗi giá trị như vậy hình thành các kiểu dữ liệu khác nhau trong Python.\nKiểu dữ liệu số Có ba loại kiểu dữ liệu thuộc nhóm dữ liệu số là:\n int: số nguyên. Ví dụ: -4, 0, 100, v.v\u0026hellip; Độ lớn của số nguyên trong Python không giới hạn theo số bit như các ngôn ngữ khác mà theo bộ nhớ hiện có. float: số thực. Ví dụ: -4.0, 3.14156, v.v\u0026hellip; Độ chính xác của số thực đến 15 số sau dấu thập phân. complex: số phức. Ví dụ: -3 + 4j, 3.4 - 5.0j, v.v\u0026hellip;  Python cung cấp các toán tử số học phục vụ nhu cầu tính toán cho kiểu dữ liệu số như sau:\n   Toán tử Ý nghĩa Ví dụ (x = 7, y = 5) Kết quả     + Phép cộng x + y 12   - Phép trừ x - y 2   * Phép nhân x * y 35   / Phép chia x / y 1.4   % Phép chia lấy dư x % y 2   ** Phép lũy thừa x ** y 16807   // Phép chia lấy phần nguyên x // y 1   \u0026amp; Phép nhân logic bit x \u0026amp; y 5   | Phép cộng logic bit x | y 7   ^ Phép cộng loại trừ logic x ^ y 2   ~ Phép đảo bit ~x -8   \u0026laquo; Phép dịch bit qua trái x \u0026laquo; 2 28   \u0026raquo; Phép dịch bit qua phải x \u0026raquo; 2 1    và các toán tử gán:\n   Toán tử Ý nghĩa Ví dụ (x = 7, y = 5) Tương ứng Kết quả     = Phép gán bằng x = y x = y x = 5   += Phép cộng rồi gán lại x += y x = x + y x = 12   -= Phép trừ rồi gán lại x -= y x = x - y x = 2   *= Phép nhân rồi gán lại x *= y x = x * y x = 35   /= Phép chia rồi gán lại x /= y x = x / y x = 1.4   %= Phép chia lấy dư rồi gán lại x %= y x = x % y x = 2   **= Phép lũy thừa rồi gán lại x **= y x = x ** y x = 16807   //= Phép chia lấy phần nguyên rồi gán lại x //= y x = x // y x = 1   \u0026amp;= Phép nhân logic bit rồi gán lại x \u0026amp;= y x = x \u0026amp; y x = 5   |= Phép cộng logic bit rồi gán lại x |= y x = x | y x = 7   ^= Phép cộng loại trừ logic bit rồi gán lại x ^= y x = x ^ y x = 2   \u0026laquo;= Phép dịch bit trái rồi gán lại x \u0026laquo;= 2 x = x \u0026laquo; 2 x = 28   \u0026raquo;= Phép dịch bit phải rồi gán lại x \u0026raquo;= 2 x = x \u0026raquo; 2 x = 1    Kiểu dữ liệu luận lý Kiểu dữ liệu luận lý (bool) cung cấp 2 giá trị là True và False ứng với đúng và sai. Lưu ý những cách viết khác như true, TRUE hay \u0026ldquo;true\u0026rdquo; không thể hiện giá trị kiểu dữ liệu này. Thường kết quả các phép toán so sánh là giá trị kiểu bool:\n   x = 5 Kết quả So sánh Kết quả So sánh Kết quả     x == 5 True x \u0026lt; 5 False x \u0026gt; 5 False   x != 5 False x \u0026lt;= 5 True x \u0026gt;= 5 True    Một số phép toán với bool:\n not: đảo giá trị, True thành False và False thành True. and: phép logic và: True khi cả 2 vế cùng True, còn lại đều cho giá trị False. Một cách suy kết quả khác là nếu vế đầu là False thì kết quả là False, còn nếu vế đầu là True thì lấy giá trị vế sau làm kết quả cho phép and. or: phép logic hoặc: True khi có ít nhất 1 vế là True. Một cách suy kết quả khác là nếu vế đầu là True thì kết quả là True, còn nếu vế đầu là False thì lấy giá trị vế sau làm kết quả cho phép or.     x = 5 (A) y = 7 (B) not(A) A and B A or B     x \u0026lt; 5 y \u0026lt; 5 True False False   x \u0026gt; 5 y \u0026gt; 5 True False True   x \u0026lt; 7 y \u0026lt; 7 False False True   x \u0026lt;= 5 y \u0026gt;= 7 False True True    Tóm tắt   Python cung cấp 3 kiểu dữ liệu số là int cho số nguyên, float cho số thực và complex cho số phức. Python cung cấp đầy đủ các toán tử số học, toán tử bit. Python cung cấp kiểu dữ liệu luận lý là bool có 2 giá trị True và False. Kết quả các phép so sánh sẽ cho giá trị luận lý Python cung cấp các phép toán luận lý not, and và or.    Bài tập  Kết quả đoạn chương trình bên dưới là gì?  a = 5 a + 2.7 a  a. 7 b. 7.7 c. Không phải 2 giá trị trên d. Lỗi\nKết quả đoạn chương trình bên dưới là gì?  a = 5 b = 2 a/b  a. 2 b. 2.5 c. 3 d. Không phải các giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a, b = 2, 5 a, b = b, a (a, b)  a. (2, 5) b. (5, 2) c. (5, 5) d. Không phải các giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a, b = 2, 5 a = a + b b = a - b a = a - b a  a. 5 b. 2 c. Lỗi d. Không phải các giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a, b = 2, 5 a = a \u0026gt; 1 or b != 5 b = a and b \u0026lt;= 5 a, b  a. 2, 5 b. True, True c. False, False d. Không phải các giá trị trên\nViết đoạn chương trình đảo giá trị 2 biến a và b có dùng biến trung gian. Ví dụ cho a = 5, b = 2 thì kết quả xuất ra là 2, 5.  ","date":1586296800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586296800,"objectID":"64e6abdc512a6d9f5f177146387b2933","permalink":"/courses/python/number/","publishdate":"2020-04-08T05:00:00+07:00","relpermalink":"/courses/python/number/","section":"courses","summary":"Trong lập trình máy tính, một kiểu dữ liệu (data type) là một cách phân loại dữ liệu cho trình biên dịch hoặc thông dịch hiểu các lập trình viên muốn sử dụng loại dữ liệu gì.","tags":null,"title":"Kiểu dữ liệu số và luận lý","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"b0464373cd8d45fb87e0e1321ab71549","permalink":"/courses/go/basic/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/basic/example1/","section":"courses","summary":"In this tutorial, I'll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Basic","type":"docs"},{"authors":null,"categories":null,"content":"Như có đề cập, Python không để các biến gắn trực tiếp với giá trị mà biến gắn với đối tượng chứa giá trị nên thực chất các kiểu dữ liệu ở Python đều là lớp (class)1 và các biến gắn với các đối tượng (object) của lớp này. Đó là lý do các bạn sẽ thấy kiểu dữ liệu có phương thức đi kèm như trong bài này.\nKiểu dữ liệu chuỗi Kiểu dữ liệu gắn với chuỗi ký tự (string literal) trong Python là kiểu dữ liệu chuỗi và được khai báo là str. Ví dụ:\nx = 'Hello' y = \u0026quot;Python\u0026quot; z = '''Hello Python 3.8!'''  Bản chất chuỗi ký tự dẫn đến giá trị biến kiểu chuỗi trong Python là không thay đổi được một khi đã tạo. Nếu muốn biến nhận chuỗi giá trị khác, chúng ta chỉ việc gán lại chuỗi mới cho biến. Chuỗi cũ sẽ được Python dọn rác sau đó.\nMột số toán tử, hàm và phương thức phổ biến cho kiểu str trong Python:\n +: phép cộng chuỗi. Hai chuỗi có thể ghép thành chuỗi mới bằng toán tử +. *: phép nhân chuỗi. Một chuỗi mới gồm n chuỗi hiện tại được tạo với phép *.  x = 'Hello' y = \u0026quot; Python\u0026quot; print(x + y) # 'Hello Python' print(x + 3 * y) # 'Hello Python Python Python'   [ ]: Toán tử trích xuất chuỗi con: Python hỗ trợ 1 số kiểu trích xuất chuỗi như sau:  Chuỗi con 1 ký tự: dạng x[n] với x là biến str và n là chỉ số bắt đầu từ 0 đến chiều dài chuỗi - 1. Nếu n \u0026lt; 0 Python sẽ lấy ngược từ cuối lên. Nếu n \u0026gt;= chiều dài chuỗi, Python sẽ báo lỗi string index out of range. Lưu ý là Python không có kiểu dữ liệu ký tự (character), tất cả đều là chuỗi. Chuỗi con nhiều ký tự: dạng x[i:j] với i \u0026lt;= j sẽ tạo chuỗi bắt đầu từ vị trí i đến vị trí j-1. Trường hợp thiếu i, Python tự hiểu chúng ta muốn lấy từ vị trí đầu tiên và thiếu j, Python sẽ lấy tới vị trí cuối cùng.    x = 'Hello Python' x[0] # 'H' x[-2] # 'o' (x[-1] cho chuỗi chứa ký tự cuối cùng là 'n' nên x[-2] là 'o') x[0:5] # 'Hello' x[:5] # 'Hello' x[6:] # 'Python' x[6:-2] # 'Pyth' (-2 là vị trí của '0' và theo nguyên tắc lấy đến trước nó) x[:] # 'Hello Python'   Hàm len(): lấy chiều dài chuỗi. Ví dụ: len(x) Phương thức: Như có nói ở đầu bài, thực chất str là 1 class nên nó có 1 số phương thức xử lý chuỗi như sau:  capitalize(): Trả về chuỗi mới có ký tự đầu tiên từng từ viết hoa. upper(): Trả về chuỗi mới là chuỗi in hoa của chuỗi cũ. lower(): Trả về chuỗi mới là chuỗi in thường của chuỗi cũ. strip(): Trả về chuỗi mới là chuỗi cũ đã bỏ các khoảng trắng ở đầu và cuối chuỗi. isalpha(): Trả về True nếu chuỗi chỉ gồm chữ cái a-z, A-Z và các ký tự Unicode. isdigit(): Trả về True nếu chuỗi chỉ gồm chữ số: 0-9. startswith(sub): Trả về True nếu chuỗi bắt đầu bằng chuỗi sub. endswith(sub): Trả về True nếu chuỗi kết thúc bằng chuỗi sub. find(sub, start, end): Trả về vị trí đầu tiên của chuỗi con được tạo bởi [start, end] mà chứa chuỗi sub. Nếu không tìm thấy, trả về -1. replace(old, new): Trả về chuỗi mới bằng cách thay thế hết các chuỗi con old ở chuỗi cũ bằng chuỗi con new. split(deli): Trả 1 nhóm các chuỗi con được cắt ra tại các vị trí chứa deli. Nhóm này gọi là list mà ta sẽ tìm hiểu sau. index(char): Trả về vị trí xuất hiện đầu tiên của chuỗi char trong chuỗi. Nếu không có Python báo lỗi luôn: substring not found. count(char): Trả về số lần xuất hiện của chuỗi char trong chuỗi.  x = 'hello Python' len(x) # 12 x.capitalize() # 'Hello Python' x.upper() # 'HELLO PYTHON' x.lower() # 'hello python' \u0026quot; Python \u0026quot;.strip() # 'Python' \u0026quot; Python \u0026quot;.isalpha() # False (do chứa khoảng trắng) \u0026quot;Python\u0026quot;.isalpha() # True \u0026quot;-123\u0026quot;.isdigit() # False (do có chứa dấu -, dấu thập phân cũng không được) \u0026quot;123\u0026quot;.isdigit() # True x.startwith(\u0026quot;He\u0026quot;) # False (x bắt đầu bằng 'h', không phải 'H') x.startwith(\u0026quot;he\u0026quot;) # True x.endwith(\u0026quot;on\u0026quot;) # True x.find(\u0026quot;o\u0026quot;, 0, 5) # 4 (chữ o vị trí thứ 4 trong chuỗi con 'hello') x.replace('h', \u0026quot;H\u0026quot;) # Hello PytHon\u0026quot; (Có 2 chuỗi 'h' đều bị thay thành 'H') x.split(' ') # ['hello', 'Python'] x.count('o') # 2 x.index('o') # 4 x.index('O') # Lỗi: substring not found    Chuyển kiểu dữ liệu  Python cung cấp hàm type() để kiểm tra kiểu dữ liệu của một biến hoặc chuỗi giá trị. Dễ dàng thấy chúng đều là các class. Ví dụ:  type(1) # int print(type(1)) # \u0026lt;class 'int'\u0026gt; type(-1.5) # float print(type(-1.5)) # \u0026lt;class 'float'\u0026gt; print(type(True)) # \u0026lt;class 'bool'\u0026gt; print(type(\u0026quot;Hello\u0026quot;)) # \u0026lt;class 'str'\u0026gt;   Python hỗ trợ kiểu chuyển kiểu dữ liệu ngầm trong 1 số tình huống kiểu hiện tại không phù hợp. Ví dụ:  type(7/5) # float (để đảm bảo phép chia chính xác, kết quả chuyển thành float) type(7 + 8.0) # float (để đảm bảo độ chính xác cần chuyển lên float)   Trong trường hợp muốn chuyển kiểu tường minh (ép kiểu), Python hỗ trợ như sau:  type(float(6)) # float (float(6) cho giá trị 6.0) type(str(123)) # str (str(123) cho kết quả chuỗi '123') type(int(True)) # int (int(True) cho giá trị 1) type(int('4.0')) # (Lỗi: invalid literal for int() with base 10: '4.0') type(float('4.0')) # float (float('4.0') cho giá trị 4.0)  Tóm tắt   Kiểu dữ liệu chuỗi trong Python là str, được khai báo bằng chuỗi ký tự (string literal). Chuỗi trong Python là không thay đổi nên cần đổi nội dung chuỗi của biến ta phải gán chuỗi mới. Python cung cấp các toán tử, hàm và phương thức để xử lý chuỗi. type() là hàm Python cung cấp để kiểm tra kiểu dữ liệu của 1 biến. Python hỗ trợ chuyển kiểu dữ liệu ngầm để đảm bảo độ chính xác của dữ liệu. Muốn chuyển kiểu tường minh chúng ta có thể dùng cách ép kiểu: \u0026lt;kiểu dữ liệu mới\u0026gt;(\u0026lt;biến kiểu dữ liệu cũ\u0026gt;).    Bài tập  Kết quả đoạn chương trình bên dưới là gì?  a = 'Python' b = a[1: len(a)] b  a. ython b. Pytho c. Python d. Không phải 2 giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a = 'Python' b = [-3, len (a)] b  a. Pyt b. hon c. Python d. Không phải 2 giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a = 'Python' b = 3.8 print(2*(a+b))  a. Python3.8 b. Python3.8Python3.8 c. 2Python3.8 d. Không phải 3 giá trị trên\nKết quả đoạn chương trình bên dưới là gì?  a = 'Python' print(2*(a.upper()))  a. 2Python b. PythonPython c. 2PYTHON d. PYTHONPYTHON\nViết chương trình mã hóa chuỗi theo nguyên tắc như sau:   Chuyển toàn bộ chuỗi thành chữ thường Thay thế tất cả ký tự n trong chuỗi thành m. Nếu chiều dài quá 5 ký tự thì chỉ lấy 5 ký tự đầu tiên.    Lớp và đối tượng là khái niệm trong hướng đối tượng. Nếu bạn chưa biết qua khái niệm hướng đối tượng có thể tham khảo thêm ở đây.\u0026#8617;\n   ","date":1586354400,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586354400,"objectID":"691bcdc103f820b497c64ca884ba80e5","permalink":"/courses/python/string/","publishdate":"2020-04-08T21:00:00+07:00","relpermalink":"/courses/python/string/","section":"courses","summary":"Như có đề cập, Python không để các biến gắn trực tiếp với giá trị mà biến gắn với đối tượng chứa giá trị nên thực chất các kiểu dữ liệu ở Python đều là lớp (class)1 và các biến gắn với các đối tượng (object) của lớp này.","tags":null,"title":"Kiểu dữ liệu chuỗi","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1557010800,"objectID":"fa283dff47582a4677804102f0b692a0","permalink":"/courses/go/basic/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/go/basic/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":null,"title":"Basic","type":"docs"},{"authors":null,"categories":null,"content":"Trong hai bài trước chúng ta đã tìm hiểu về các kiểu dữ liệu cơ bản. Bây giờ chúng ta sẽ tìm hiểu về các kiểu dữ liệu tập hợp, chứa nhiều phần tử, mỗi phần tử có kiểu dữ liệu cơ bản như số hay chuỗi. Trước tiên là kiểu dữ liệu list và tuple.\nKiểu list List là kiểu dữ liệu tập hợp gồm các phần tử có thứ tự nhất định khi được tạo. Các phần tử của list có thể khác kiểu dữ liệu. List là một trong những kiểu dữ liệu được sử dụng nhiều nhất trong Python vì rất linh hoạt. Khai báo list là một danh sách các phần tử cách nhau dấu phẩy, đặt trong cặp ngoặc vuông [].\na = [] print(a) # [] a = [1, 2, 3, 'Python'] print(a) # [1, 2, 3, 'Python'] print(type(a)) # \u0026lt;class 'list'\u0026gt;  Một số toán tử , hàm và phương thức phổ biến cho kiểu list trong Python:\n [ ]: tương tự như với kiểu str, chúng ta có thể dùng [] để truy xuất phần tử hay list con trong kiểu list. Chúng ta cũng có thể dùng phép gán từng phần tử để thay đổi giá trị của phần tử. Hàm len(): lấy số phần tử list. append(element): phương thức thêm một phần tử vào list. Mỗi lần gọi sẽ thêm phần tử element vào cuối list. extend(list1): phương thức thêm nhiều phần tử vào list. Các phần tử của list1 sẽ được thêm vào cuối list theo đúng thứ tự trước đó trong list1. insert(index, element): phương thức chèn phần tử element tại vị trí index. index = 0 sẽ chèn vào vị trí đầu tiên còn nếu index \u0026gt; số phần tử của list thì sẽ thêm vào cuối cùng như phương thức append. remove(element): phương thức xóa phần tử đầu tiên có giá trị bằng giá trị của element. Nếu tìm không ra phần tử như vậy, Python sẽ báo lỗi: list.remove(x): x not in list. pop(index): phương thức trả về phần tử thứ index của list và xóa nó khỏi list. Nếu không cung cấp index, phần tử cuối cùng của list sẽ được chọn. index(element): phương thức trả về vị trí phần tử đầu tiên có giá trị bằng element. Nếu không có phần tử giống, Python báo lỗi: is not in list. count(element): phương thức trả về số lần xuất hiện phần tử có giá trị như element trong list. sort(): phương thức sắp xếp list theo thứ tự tăng dần. Trong trường hợp các phần tử thuộc loại không so sánh được với nhau, như kiểu int và str, thì Python sẽ báo lỗi: \u0026lsquo;\u0026lt;\u0026rsquo; not supported between instances of \u0026lsquo;str\u0026rsquo; and \u0026lsquo;int\u0026rsquo;. reverse(): Ngược với sort(), phương thức reverse sẽ sắp xếp list theo thứ tự giảm dần. Python cũng sẽ báo lỗi nếu việc sắp xếp thất bại do không so sánh được.  a = [1, 2, 3, 'python'] print(a[0]) # 1 print(a[-1]) # 'python' print(a[4]) # (Lỗi: list index out of range) print(a[:3]) # [1, 2, 3] a[3] = 'Python' # (Gán chuỗi 'Python' cho phần tử cuối) print(a[3]) # 'Python' print(len(a)) # 4 a.append('Go') # (Thêm 'Go' vào cuối list) print(a) # [1, 2, 3, 'Python', 'Go'] a.extend(['R', 'Julia']) # (Thêm list ['R', 'Julia'] vào) print(a) # [1, 2, 3, 'Python', 'Go', 'R', 'Julia'] a.insert(0, 0) # (Chèn 0 vào vị trí đầu tiên) print(a) # [0, 1, 2, 3, 'Python', 'Go', 'R', 'Julia'] a.remove(0) # (Xóa phần tử đầu tiên) print(a) # [1, 2, 3, 'Python', 'Go', 'R', 'Julia'] print(a.pop(0)) # 1 (đồng thời xóa phần tử đầu tiên) print(a.pop()) # 'Julia' (đồng thời xóa phần tử cuối cùng) print(a) # [2, 3, 'Python', 'Go', 'R'] print(a.index(2)) # 0 print(a.index(1)) # (Lỗi: 1 is not in list) print(a.count(2)) # 1 a.sort() # (Lỗi '\u0026lt;' not supported between instances of 'str' and 'int') b = a[2:] # (b = ['Python', 'Go', 'R']) b.sort() # (Sắp xếp list tăng dần) print(b) # ['Go', 'Python', 'R'] b.reverse() # (Sắp xếp list giảm dần) print(b) # ['R', 'Python', 'Go']  Kiểu list hỗ trợ các khai báo nhiều biến bằng cách gán phần tử của list như sau. Lưu ý số biến phải đúng bằng số phần tử của list\na = [1, 2, 3] x, y, z = a print(x, y, z) # 1 2 3  Kiểu tuple Kiểu tuple gần giống kiểu list, chỉ khác nhau ở điểm là một khi đã tạo thì ta không thể thay đổi số phần tử và giá trị từng phần tử nó được nữa. Khái báo tuple là một danh sách phần tử cách nhau dấu phẩy được bọc trong cặp ngoặc đơn () nhưng cũng có thể bỏ qua cặp () khi khai báo.\na = () print(a) # () a = (1, 2, 3, 'Python') print(a) # (1, 2, 3, 'Python') print(type(a)) # \u0026lt;class 'tuple'\u0026gt; b = 1, 2, 3 # (Cách tạo tuple không cần ()) print(b) # (1, 2, 3) c = (1,) * 5 # (Tạo 5 phần tử 1 giống nhau cho tuple c) print(c) # (1, 1, 1, 1, 1)  Do đặc thù không thể thay đổi số phần tử và giá trị các phần tử nên toán tử và phương thức của tuple ít hơn hẳn của list:\n [ ]: tương tự như với kiểu list, chúng ta có thể dùng [] để truy xuất phần tử hay tuple con trong kiểu tuple. Tuy nhiên chúng ta không thể dùng phép gán từng phần tử để thay đổi giá trị của phần tử tuple. +: chúng ta có thể dùng toán tử + để ghép 2 tuple thành một tuple mới như phương thức extend() của list nhưng kết quả trả về tuple mới, không phải trên tuple cũ. Có thể dùng toán tử gán += để gán lại vào biến tuple cũ. Lúc này kết quả giống extend() của list. *: chúng ta có thể nhân số phần tử của tuple lên n lần với phép nhân. Có thể dùng toán tử gán *=. Hàm len(): lấy số phần tử tuple. index(element): phương thức trả về vị trí phần tử đầu tiên có giá trị bằng element. Nếu không có phần tử giống, Python báo lỗi: is not in tuple. count(element): phương thức trả về số lần xuất hiện phần tử có giá trị như element trong list.  a = (1, 2, 3, 'python') print(a[0]) # 1 print(a[-1]) # 'python' print(a[4]) # (Lỗi: tuple index out of range) print(a[:3]) # (1, 2, 3) a[3] = 'Python' # (Lỗi: 'tuple' object does not support item assignment) print(len(a)) # 4 a += ('Go', 'R', 'Julia') # Gán tuple mới cho a bằng cách gộp a cũ và tuple ('Go', 'R', 'Julia') print(a) # (1, 2, 3, 'Python', 'Go', 'R', 'Julia') print(a[0:3] * 3) # (1, 2, 3, 1, 2, 3, 1, 2, 3) print(a.index(2)) # 1 print(a.index(0)) # (Lỗi: 0 is not in tuple) print(a.count(2)) # 1  Tương tự kiểu list, tuple cũng hỗ trợ các khai báo nhiều biến bằng cách gán phần tử của tuple như sau. Lưu ý số biến phải đúng bằng số phần tử của tuple.\na = (1, 2, 3) x, y, z = a print(x, y, z) # 1 2 3 x, y = a # Lỗi: too many values to unpack  Tóm tắt   Kiểu dữ liệu list gồm nhiều phần tử, có thể khác nhau kiểu dữ liệu, khai báo bằng cách nhóm trong cặp [], các phần tử cách nhau dấu phẩy. Python cung cấp các toán tử, hàm và phương thức để xử lý list. Kiểu dữ liệu tuple gồm nhiều phần tử, có thể khác nhau kiểu dữ liệu, khai báo bằng cách nhóm trong cặp (), các phần tử cách nhau dấu phẩy. Khác với list, chúng ta không thể cập nhật giá trị phần tử của tuple cũng như thêm hay xóa bớt số phần tử. Có thể khai báo nhanh nhiều biến bằng cách gán chúng với 1 list hay tuple, điều kiện là số biến phải khớp với số phần tử của list hay tuple.    ","date":1586383200,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586383200,"objectID":"78d1b5dac62fc0e632ad8ed23e4c94fd","permalink":"/courses/python/list-tuple/","publishdate":"2020-04-09T05:00:00+07:00","relpermalink":"/courses/python/list-tuple/","section":"courses","summary":"Trong hai bài trước chúng ta đã tìm hiểu về các kiểu dữ liệu cơ bản. Bây giờ chúng ta sẽ tìm hiểu về các kiểu dữ liệu tập hợp, chứa nhiều phần tử, mỗi phần tử có kiểu dữ liệu cơ bản như số hay chuỗi.","tags":null,"title":"Kiểu dữ liệu list và tuple","type":"docs"},{"authors":null,"categories":null,"content":"Trong bài này chúng ta sẽ tiếp tục tìm hiểu về 2 kiểu dữ liệu tập hợp còn lại là set và dict.\nKiểu dữ liệu set Set là tập hợp các phần tử không giống nhau. Set được tạo từ danh sách các phần tử cách nhau dấu phẩy được bọc bởi cặp ngoặc nhọn {}.\ns = {1, 2, 3, 'Python'} print(s) # {1, 2, 3, 'Python'} print(type(s)) # \u0026lt;class 'set'\u0026gt;  Do cách tổ chức các phần tử của set mà chúng ta không thể dùng toán tử [] để truy xuất phần tử của set. Chúng ta cũng không thể thay đổi giá trị một phần tử của set.\nMột số hàm và phương thức phổ biến cho kiểu set trong Python:\n Hàm len(): lấy số phần tử của set. add(element): phương thức thêm phần tử element vào set. Nếu đã tồn tại phần tử có giá trị như element, Python sẽ bỏ qua mà không thêm vào set. update(list): phương thức thêm nhiều phần tử vào set từ 1 list. Giá trị đã tồn tại sẽ không được thêm vào. remove(element) và discard(element): 2 phương thức đều xóa phần tử element ra khỏi set. Điểm khác biệt là nếu xóa phần tử không tồn tại trong set với remove, Python sẽ báo lỗi còn với discard thì không báo. clear(): phương thức xóa rỗng set. union(set1): phương thức này trả về một set mới có phần tử là hợp của set gọi và set1. intersection(set1): phương thức trả về một set chứa các phần tử chung giữa set gọi và set1. difference(set1): phương thức trả về một set chứa những phần tử chỉ có trong set gọi mà không có trong set1. issubset(set1): phương thức này trả về True nếu tất cả phần tử của set gọi nằm trong set1. isdisjoint(set1): phương thức này trả về True nếu không có phần tử chung giữa set gọi và set1. issuperset(set1): phương thức này trả về True nếu set gọi chứa tất cả các phần tử của set1.  s = {1, 2, 3, 'Python'} # (Tạo set) print(len(s)) # 4 s.add(0) # (Thêm phần tử 0) print(s) # {0, 1, 2, 3, 'Python'} s.update([4,5,6]) # (Thêm list [4,5,6]) print(s) # {0, 1, 2, 3, 4, 5, 6, 'Python'} s.remove(6) # (Xóa phần tử 6) print(s) # {0, 1, 2, 3, 4, 5, 'Python'} s.remove(6) # (Lỗi: KeyError: 6) s.discard(6) # (Xóa phần tử 6, không báo lỗi) s.discard('Python') # (Xóa phần tử 'Python') print(s) # {0, 1, 2, 3, 4, 5} s1 = s.union({4, 5, 6, 7}) # (Tạo s1 là hợp s và set {4, 5, 6, 7}) print(s1) # {0, 1, 2, 3, 4, 5, 6, 7} print(s.intersection(s1)) # {0, 1, 2, 3, 4, 5} print(s.difference(s1)) # set() print(s1.difference(s)) # {6, 7} print(s.issubset(s1)) # True print(s1.issubset(s)) # False print(s.isdisjoint(s1)) # False print(s.issuperset(s1)) # False print(s1.issuperset(s)) # True s1.clear() # (Xóa rỗng s1) print(s1) # set()  Kiểu dữ liệu dict Kiểu dữ liệu dict là một tập hợp các cặp khóa (key) - giá trị (value). Nó thường được sử dụng khi chúng ta có một lượng dữ liệu lớn cần truy xuất nhanh. dict được tối ưu hóa để lấy dữ liệu thông qua key. Trong Python, dict được định nghĩa trong dấu ngoặc nhọn {} với mỗi phần tử là một cặp khóa:giá trị. Khóa đòi hỏi là các kiểu dữ liệu không thay đổi giá trị như số, chuỗi hay tuple và đòi hỏi các khoá phải khác nhau còn giá trị có thể là bất kỳ loại dữ liệu nào, ngay cả dict cũng được.\nd = {} # dict rỗng print(d) # {} print(type(d)) # \u0026lt;class 'dict'\u0026gt; d = {'.py': 'Python file', '.go': 'Go file', '.r': ['R file', 'Right Audio Channel File']} print(d) # {'.py': 'Python file', '.go': 'Go file', '.r': ['R file', 'Right Audio Channel File']}  Một số toán tử , hàm và phương thức phổ biến cho kiểu dict trong Python:\n [key]: chúng ta có thể dùng d[key] để truy xuất giá trị ứng với khóa key của dict d. Chúng ta cũng có thể dùng phép gán để thay đổi giá trị của key tương ứng. Hàm len(): lấy số phần tử của dict. items(): phương thức trả về list cặp khóa, giá trị của dict. list này cập nhật tự động nếu dict có thay đổi. keys(): phương thức trả về list khóa của dict. list này cập nhật tự động nếu dict có thay đổi. values(): phương thức trả về list giá trị của dict. list này cập nhật tự động nếu dict có thay đổi. pop(key): phương thức trả về giá trị ứng với khóa key của dict đồng thời xóa luôn cặp khóa, giá trị này ra khỏi dict. copy(): phương thức chép toàn bộ dict gọi vô 1 dict mới rồi trả về. clear(): phương thức xóa rỗng dict. update(dict1): phương thức bổ sung các cặp khóa, giá trị của dict1 vào dict gọi.  d = {'.py': 'Python file', '.go': 'Go file', '.r': ['R file', 'Right Audio Channel File']} print(d['.go']) # 'Go file' print(d['.java']) # (Lỗi: KeyError: '.java') d['.r'] = 'R file' # (Gán lại giá trị ứng với khóa '.r') print(d) # {'.go': 'Go file', '.py': 'Python file', '.r': 'R file'} print(len(d)) # 3 print(d.items()) # dict_items([('.py', 'Python file'), ('.go', 'Go file'), ('.r', 'R file')]) print(d.keys()) # dict_keys(['.py', '.go', '.r']) print(d.values()) # dict_values(['Python file', 'Go file', 'R file']) print(d.pop('.r')) # 'R file' print(d) # {'.py': 'Python file', '.go': 'Go file'} d1 = d.copy() # (Sao chép toàn bộ d gán vô d1) print(d1) # {'.go': 'Go file', '.py': 'Python file'} d.clear() # (Xóa rỗng d) print(d) # {} d.update(d1) # (Thêm phần tử d1 vô d) print(d) # {'.go': 'Go file', '.py': 'Python file'}  Tóm tắt   Kiểu dữ liệu set gồm nhiều phần tử nhưng chúng hoàn toàn khác nhau, khai báo bằng cách nhóm trong cặp {}, các phần tử cách nhau dấu phẩy. Python cung cấp các toán tử, hàm và phương thức để xử lý set. Kiểu dữ liệu dict gồm nhiều phần tử, mỗi phần tử là cặp khóa:giá trị, khai báo bằng cách nhóm trong cặp {}, các phần tử cách nhau dấu phẩy. Khóa kiểu dict đòi hỏi là các kiểu dữ liệu không thay đổi như số, chuỗi hay tuple. Giá trị thì kiểu dữ liệu nào cũng được. dict phù hợp khi có khối lượng dữ liệu lớn cần truy xuất qua 1 thuộc tính riêng được chọn làm khóa.    ","date":1586437200,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586437200,"objectID":"603ff0752a033a84eb79836748584711","permalink":"/courses/python/set-dict/","publishdate":"2020-04-09T20:00:00+07:00","relpermalink":"/courses/python/set-dict/","section":"courses","summary":"Trong bài này chúng ta sẽ tiếp tục tìm hiểu về 2 kiểu dữ liệu tập hợp còn lại là set và dict.\nKiểu dữ liệu set Set là tập hợp các phần tử không giống nhau.","tags":null,"title":"Kiểu dữ liệu set và dict","type":"docs"},{"authors":null,"categories":null,"content":"Mã lệnh chúng ta viết được thực thi theo thứ tự từng câu lệnh từ trái sang phải, từ trên xuống dưới tạo thành một luồng thực thi chương trình. Cũng như các ngôn ngữ khác, Python cung cấp các cấu trúc điều khiển giúp cho chúng ta có thể thay đổi thứ tự thực thi theo ý muốn thay vì một luồng duy nhất tuần tự. Các cấu trúc điều khiển bao gồm:\n Câu lệnh if else Vòng lặp for Vòng lặp while  Câu lệnh if else Đúng như ý nghĩa tên, câu lệnh if else sẽ tạo ra các nhánh thực thi, mỗi nhánh là một khối lệnh được thực thi dựa trên điều kiện nêu ở if hay else cho giá trị True. Cú pháp đầy đủ câu lệnh if else như sau:\nif \u0026lt;biểu thức so sánh 1\u0026gt;: \u0026lt;khối lệnh 1\u0026gt; elif \u0026lt;biểu thức so sánh 2\u0026gt;: \u0026lt;khối lệnh 2\u0026gt; ... elif \u0026lt;biểu thức so sánh n-1\u0026gt;: \u0026lt;khối lệnh n-1\u0026gt; else: \u0026lt;khối lệnh n\u0026gt;   Biểu thức so sánh có thể là 1 biểu thức đơn giản hoặc phép and hay or của nhiều biểu thức so sánh nhưng kết quả sau cùng phải cho giá trị True hoặc False. Khi 1 biểu thức so sánh cho giá trị True, khối lệnh bên dưới nó sẽ được thực thi và lệnh if kết thúc. Khi biểu thức so sánh cho giá trị False, biểu thức so sánh ở câu lệnh elif tiếp theo sẽ được xem xét. Khi biểu thức so sánh ở câu lệnh if và elif đều False thì khối lệnh ở else sẽ được thực thi. Không nhất thiết lệnh if else phải có đủ các câu lệnh như trên mà có thể không có lệnh elif, không có else hay không có cả hai. Riêng câu lệnh if bắt buộc luôn phải có.  Xét ví dụ xếp loại học lực học sinh phổ thông dựa trên điểm trung bình, chúng ta có ví dụ như sau:\npoint = 8.5 if point \u0026lt; 3.5: result = 'Kém' elif (3.5 \u0026lt;= point) and (point \u0026lt; 5): result = 'Yếu' elif (5 \u0026lt;= point) and (point \u0026lt; 6.5): result = 'Trung bình' elif (6.5 \u0026lt;= point) and (point \u0026lt; 8): result = 'Khá' elif (8 \u0026lt;= point) and (point \u0026lt; 9): result = 'Giỏi' else: result = 'Xuất sắc' print(result) # 'Giỏi'  Tóm tắt   Khi cần kiểm tra biểu thức điều kiện để thực thi tương ứng chúng ta dùng câu lệnh if với cú pháp đầy đủ là if \u0026hellip; elif \u0026hellip; else \u0026hellip; Phần elif và else có thể bỏ nếu không cần thiết. Biểu thức điều kiện là biểu thức so sánh cho kết quả là giá trị luận lý True hoặc False. Python không cung cấp lệnh switch case như các ngôn ngữ khác.    ","date":1586469600,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586469600,"objectID":"5cc28ab695f11f76e817e095195bbb21","permalink":"/courses/python/if-else/","publishdate":"2020-04-10T05:00:00+07:00","relpermalink":"/courses/python/if-else/","section":"courses","summary":"Mã lệnh chúng ta viết được thực thi theo thứ tự từng câu lệnh từ trái sang phải, từ trên xuống dưới tạo thành một luồng thực thi chương trình. Cũng như các ngôn ngữ khác, Python cung cấp các cấu trúc điều khiển giúp cho chúng ta có thể thay đổi thứ tự thực thi theo ý muốn thay vì một luồng duy nhất tuần tự.","tags":null,"title":"Lệnh điều khiển if else","type":"docs"},{"authors":null,"categories":null,"content":"Trong các bài về kiểu dữ liệu tập hợp, chúng ta thấy mỗi kiểu gồm nhiều phần tử khác nhau. Vậy làm thế nào để lấy phần tử của một biến tập hợp có n phần tử? Chúng ta có thể dùng toán tử [] n lần? Cũng như các ngôn ngữ khác, Python cung cấp câu lệnh lặp for để giải quyết vấn đề này. Python cũng cung cấp lệnh while để giải 1 số vấn đề lặp khác.\nLặp while Câu lệnh while trong Python được sử dụng để lặp lại việc thực thi mã hoặc khối mã được điều khiển bởi một biểu thức điều kiện. Cú pháp cho một vòng lặp while như sau:\nwhile \u0026lt;biểu thức điều kiện\u0026gt;: \u0026lt;Khối lệnh while\u0026gt; else: \u0026lt;Khối lệnh else\u0026gt;  Một câu lệnh while cho phép chúng ta lặp lại việc thực thi khối lệnh bên dưới cho đến khi một biểu thức điều kiện trở thành sai, cho giá trị False. Lúc đó khối lệnh else sẽ được thực thi. Nhánh else có thể lượt bỏ tùy theo nhu cầu. Hãy xem xét vòng lặp while sau đây:\ni = 1 n = 100 count = 0 while i \u0026lt;= n: count += i i += 2 else: print(count) # 2500   Đây là đoạn mã thể hiện yêu cầu tính tổng các số lẻ từ 1 đến 100 Biến đếm i được tạo gán giá trị 1 Biến n được tạo gán giá trị 100 Biến count được tạo gán giá trị 0 Điều kiện lặp ở while là i \u0026lt;= n nghĩa là nếu i vẫn chưa lớn hơn n thì khối lệnh while tiếp tục thực thi mãi. Vì như vậy nên chú ý là nếu khối lệnh của while không làm thay đổi giá trị của i hoặc n thì khối lệnh này sẽ thực thi mãi mãi và gây treo chương trình. Khối lệnh while gồm 2 bước là cộng dồn i vào count và tăng giá trị i thêm 2. Nhờ việc tăng i này là sẽ có lúc i lớn hơn n để vòng lặp while kết thúc. Khi i = 101, tức lớn hơn n = 100, biểu thức điều kiện ở while không còn đúng nữa nên vòng lặp while kết thúc. Do có else nên khối lệnh ở else sẽ được thực thi. Kết quả chúng ta nhận là 2500, đó là kết quả cộng dồn i vào count từ 1 đến 100 hay count = 1 + 3 + 5 + \u0026hellip; + 97 + 99  Lệnh for Câu lệnh for trong Python là một dạng vòng lặp khác với while. Nó lặp lại qua một chuỗi các đối tượng. Đó là, nó sẽ duyệt qua từng phần tử của một dãy các phần tử liên tiếp như như giá trị các kiểu list, tuple, set, dict hay str mà chúng ta đã tìm hiểu ở các bài trước. Cú pháp của một lệnh for như sau:\nfor \u0026lt;phần tử\u0026gt; in \u0026lt;dãy\u0026gt;: \u0026lt;Khối lệnh for\u0026gt; else: \u0026lt;Khối lệnh else\u0026gt;  Câu lệnh for còn được gọi là vòng lặp for..in trong Python. \u0026lt;Phần tử\u0026gt; trong cú pháp trên là biến sẽ lưu giá trị từng phần tử của dãy mỗi lần lặp cho đến hết phần tử thuộc dãy. Khi vòng lặp for kết thúc, nhánh else được thực thi. Nhánh else là tùy chọn, không có cũng được.\n Lưu ý là nếu dãy có số phần tử biến động hoặc khối lệnh for làm thay đổi số phần tử của dãy thì có khả năng vòng lặp bị lặp vô tận.   Ví dụ lặp trong str:\nfor char in 'Python': print(char)  Kết quả chúng ta sẽ có 6 dòng, mỗi dòng là từng chữ cái trong chuỗi \u0026lsquo;Python\u0026rsquo;: \u0026lsquo;P\u0026rsquo;, \u0026lsquo;y\u0026rsquo;, \u0026lsquo;t\u0026rsquo;, \u0026lsquo;h\u0026rsquo;, \u0026lsquo;o\u0026rsquo;, \u0026lsquo;n\u0026rsquo;.\nVí dụ lặp trong list:\nfor item in ['Python', 'Go', 'Java']: print(item)  Kết quả chúng ta sẽ có 3 dòng, mỗi dòng là từng ngôn ngữ: \u0026lsquo;Python\u0026rsquo;, \u0026lsquo;Go\u0026rsquo;, \u0026lsquo;Java\u0026rsquo;.\nVí dụ lặp trong dict:\nd = {'.py': 'Python file', '.go': 'Go file', '.java': 'Java File'} for item in d.keys(): print(item)  Kết quả chúng ta sẽ có 3 dòng, mỗi dòng là khóa của dict: \u0026lsquo;.py\u0026rsquo;, \u0026lsquo;.go\u0026rsquo;, \u0026lsquo;.java\u0026rsquo;.\nHàm range() So với các ngôn ngữ khác thì trông có vẻ vòng lặp for hơi kém linh hoạt nhưng thực ra Python cung cấp hàm range() để tạo một chuỗi số, bắt đầu từ 0 (mặc định) và tăng thêm 1 (mặc định) và kết thúc tại một số được chỉ định như cú pháp for \u0026lt;Tạo giá trị bắt đầu\u0026gt;; \u0026lt;Biểu thức điều kiện\u0026gt;; \u0026lt;Bước lặp\u0026gt; ở các ngôn ngữ khác. Cú pháp của range() như sau:\nrange([\u0026lt;bắt đầu\u0026gt;,] \u0026lt;kết thúc\u0026gt; [, \u0026lt;bước nhảy\u0026gt;])   Chỉ số bắt đầu nếu không cung cấp, Python sẽ cho bắt đầu từ 0. Chỉ số kết thúc là bắt buộc phải có. Khi gặp chỉ số này, vòng for sẽ kết thúc nên tại giá trị này, khối lệnh vòng for không có thực thi. Chỉ số bước nhảy nếu không cung cấp, Python lấy mặc định là 1. Ví dụ với bài toán tính tổng số lẻ từ 1 đến 100 mà chúng ta đã xem qua ở vòng lặp while thì kết hợp for và range chúng ta viết như sau:  count = 0 for i in range(1, 101, 2): count += i else: print(count) # 2500   Chỉ số bắt đầu là 1 và bước nhảy là 2 để chúng ta luôn lấy giá trị tiếp theo của i là số lẻ. Chỉ số kết thúc phải để 101 để i có thể nhận giá trị 100 nhưng do chỉ quan tâm số lẻ nên để 100 cũng cho kết quả đúng dù về mặt logic có chút không ổn.  Vòng lặp lồng nhau Thỉnh thoảng chúng ta cần lặp lại nhiều chuỗi liên tục. Python cho phép sử dụng một vòng lặp bên trong một vòng lặp khác. Hãy xem xét một kịch bản trong đó chúng ta cần tạo các bảng cửu chương từ 1 đến 9. Chúng ta có thể làm như vậy bằng cách sử dụng các vòng lặp lồng nhau như được đưa ra dưới đây:\nfor i in range(1, 11): print(f'Bảng nhân {i}:') for j in range(1, 11): print(f'{i} * {j} = {i*j}') print('\\n')  Kết quả chúng ta sẽ có 10 bản nhân từ 1 đến 10.\nTừ khóa break Như vòng lặp ở ngôn ngữ khác, Python cung cấp từ khóa break để ngưng các vòng lặp. Khi thực thi đến break, lập tức vòng lặp sẽ ngưng và tiếp tục thực thi lệnh ngang cấp lệnh lặp while hay for. Lưu ý là nhánh else của while cũng sẽ không được thực thi nếu break được thực thi. Ví dụ ở phần while có thể viết lại khi dùng với break như sau:\ni = 1 n = 100 count = 0 while True: count += i i += 2 if i \u0026gt; n: break print(count) # 2500   Biểu thức điều kiện là True, nghĩa là nó luôn đúng và sẽ luôn được thực thi. Vậy thoát khỏi lặp while như thế nào? Chính là nhờ lệnh break bên dưới. Để ý sẽ thấy cách tạo lệnh while này giống như cú pháp do while ở 1 số ngôn ngữ khác. Câu lệnh if bổ sung sẽ kiểm tra nếu i quá n thì ngưng lại. Do ngưng như vậy nhánh else không có được thực thi nên chúng ta bỏ hẳn nhánh else luôn. Kết quả chúng ta chỉ nhận giá trị 2500 như cách ở while.  Từ khóa continue Python cũng cung cấp từ khóa continue để yêu cầu tiếp tục vòng lặp mới mà bỏ qua các lệnh bên dưới trong khối lệnh vòng lặp. Ví dụ, giờ chúng ta muốn tính tổng số lẻ từ 1 đến 100 nhưng dùng for và sử dụng continue:\ncount = 0 for i in range(1, 101): if i % 2 == 0: continue count += i else: print(count) # 2500   Chỉ số bước nhảy bỏ qua, tức là dùng bước nhảy mặc định là 1. Điều đó có nghĩa i sẽ nhận các giá trị liên tiếp gồm cả chẵn và lẻ. Để đảm bảo count cho kết quả đúng thì chúng ta phải loại các giá trị chẵn ra và đó là cách lệnh if được đưa vào. Lệnh if kiểm tra nếu i chia hết cho 2, tức i chẵn thì gọi lệnh continue, tức sẽ ngay lập tức lặp tiếp mà không quan tâm đến các dòng lệnh bên dưới trong khối lệnh for mà cụ thể ở đây là lệnh cộng dồn i vào count. Kết quả chúng ta vẫn có giá trị tổng cần tìm.  Từ khóa pass Đôi khi do nhu cầu, chúng ta tạo các vòng lặp while hay for mà không có nhu cầu đưa khối lệnh vào. Lúc này từ khóa pass cần đến để Python biết ta tạm thời không cần đặt gì trong khối lệnh lặp cả. Ví dụ như sau:\nfor item in ['Python', 'Go', 'Java']: pass else print('Đã duyệt xong list')  Tóm tắt   Lặp while thực thi lặp lại khối lệnh của nó cho đến khi biểu thức điều kiện ở while cho giá trị False. Lúc này khối lệnh ở else (nếu có) sẽ được thực thi. Lặp for sẽ thực hiện lặp lại khối lệnh của nó cho đến khi duyệt hết các phần tử của 1 dãy khai báo ở lệnh for. Lúc này khối lệnh else sẽ được thực thi nếu có. Hàm range giúp tạo ra dãy các phần tử để cung cấp cho lệnh for thực thi phục vụ các nhu cầu khác nhau. Lệnh for hỗ trợ khai báo nhiều lệnh for liên tiếp giúp thực thi các vòng lặp lồng vào nhau. Từ khóa break được dùng để cắt ngang việc thực thi khối lệnh vòng lặp và thoát ra ngoài, bỏ qua khối lệnh else luôn. Từ khóa continue ngay lập tức quay lên thực hiện chu lỳ lặp mới. Từ khóa pass được sử dụng khi cần khối lệnh vòng lặp rỗng.    ","date":1586523600,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586523600,"objectID":"a85abb13a64a44cb6c043a027c005259","permalink":"/courses/python/for-while/","publishdate":"2020-04-10T20:00:00+07:00","relpermalink":"/courses/python/for-while/","section":"courses","summary":"Trong các bài về kiểu dữ liệu tập hợp, chúng ta thấy mỗi kiểu gồm nhiều phần tử khác nhau. Vậy làm thế nào để lấy phần tử của một biến tập hợp có n phần tử?","tags":null,"title":"Vòng lặp","type":"docs"},{"authors":null,"categories":null,"content":"Trong bài các khái niệm cơ bản chúng tôi đã có giới thiệu sơ qua về hàm. Bây giờ chúng ta sẽ tìm hiểu kỹ hơn về hàm và các đặc điểm của hàm trong Python.\nHàm Chương trình chúng ta viết là một khối lệnh thực thi từ trên xuống dưới dù đôi lúc có rẽ nhánh hay lặp lại bởi những cấu trúc điều khiển mà chúng ta đã tìm hiểu ở những bài trước. Nếu chương trình là một bài toán lớn, phức tạp thì khối lệnh này sẽ ngày càng lớn và rất khó kiểm soát. Nhu cầu tách nhỏ khối lệnh này thành các khối lệnh nhỏ hơn chuyên thực thi một hoặc một vài tác vụ nào đó là nhu cầu cần thiết. Dựa trên nhu cầu này, hàm ra đời. Vậy hàm là gì?\nHàm là khối lệnh được khai báo sẵn và chỉ được thực thi khi gọi nó. Hàm được khai báo bằng từ khóa def theo sau là tên hàm và các tham số (parameter). Khối lệnh hàm có thể trả về 1 vài giá trị bằng cách gọi từ khóa return.\ndef \u0026lt;tên hàm\u0026gt;(\u0026lt;danh sách tham số\u0026gt;): \u0026quot;\u0026quot;\u0026quot; Khai báo hàm \u0026quot;\u0026quot;\u0026quot; \u0026lt;Khối lệnh hàm\u0026gt; return \u0026lt;các giá trị trả về\u0026gt; \u0026lt;tên hàm\u0026gt;(\u0026lt;danh sách đối số\u0026gt;) # Gọi thực thi hàm   Tên hàm theo quy tắc như tên biến, gồm chữ cái, số và ký tự gạch dưới và không được bắt đầu bằng số. Hàm Python phân biệt chữ hoa chữ thường và theo kiểu snake, tức dùng dấu gạch dưới (_) để tách các từ trong tên hàm. Ví dụ: tinh_tong, tim_Max2, v.v\u0026hellip; Hàm có thể không có tham số (parameter), một tham số hoặc nhiều tham số. Các tham số cách nhau dấu phẩy. Hàm có thể không trả về, trả về một hoặc nhiều giá trị. Gọi hàm thực thi đơn giản tạo câu lệnh với tên hàm và danh sách đối số (argument) tương ứng. Đối số có thể là biến hoặc chuỗi giá trị nhưng số lượng chúng phải khớp với số tham số khi khai báo hàm.  def calculator(): \u0026quot;\u0026quot;\u0026quot;Tính bình phương và tích của 2 số\u0026quot;\u0026quot;\u0026quot; a, b = 7, 5 print (f'Bình phương của {a} là: ', square(a)) print (f'Tổng của {a} và {b} là: ', add(a,b)) print (f'Tích và thương của {a} và {b} là: ', multi_div(a,b)) def square(a): \u0026quot;\u0026quot;\u0026quot;Tính bình phương 1 số\u0026quot;\u0026quot;\u0026quot; return a*a def add(a, b): \u0026quot;\u0026quot;\u0026quot;Tính tổng của 2 số\u0026quot;\u0026quot;\u0026quot; return a+b def multi_div(a, b): \u0026quot;\u0026quot;\u0026quot;Tính tích và thương của 2 số\u0026quot;\u0026quot;\u0026quot; return a*b, a/b calculator()   Hàm được khai báo đầu tiên có tên là calculator và không có tham số. Phần bên dưới khai báo hàm trong cặp \u0026ldquo;\u0026quot;\u0026quot;\u0026hellip;\u0026rdquo;\u0026rdquo;\u0026rdquo; mô tả thông tin về hàm mà Python sẽ bỏ qua khi thông dịch nhưng sẽ được sử dụng khi tạo tài liệu mã nguồn. Hàm khai báo 2 biến a,b và in kết quả tính bình phương và tích của a và b. Hàm này gọi thực thi 2 hàm được khai báo bên dưới. Hàm thứ 2 được khai báo là hàm có tên square, theo như mô tả chúng ta biết nó sẽ trả về bình phương của tham số duy nhất đưa vào. Hàm thứ 3 tên là add, nhận 2 tham số và trả về 1 giá trị là tổng của 2 tham số. Hàm thứ 4 tên là multi_div, thực nhiên 2 nhiệm vụ là tính tích và thương của 2 tham số rồi trả về cả 2 giá trị này. Hàm calculator được gọi sẽ cho kết quả như bên dưới:   Bình phương của 7 là: 49\nTổng của 7 và 5 là: 12\nTích và thương của 7 và 5 là: (35, 1.4)\n Chuỗi tài liệu Python có một tính năng tiện lợi được gọi là chuỗi tài liệu, thường được gọi tắt là docstrings. Đây là một công cụ không bắt buộc nhưng nên được sử dụng mỗi khi chúng ta viết chương trình vì nó giúp chương trình tốt hơn và dễ hiểu hơn. Tài liệu được viết trong ba dấu nháy đơn/kép ngay sau khai báo hàm.\nQuy ước viết docstring là một chuỗi nhiều dòng trong đó dòng đầu tiên bắt đầu bằng chữ in hoa và kết thúc bằng dấu chấm. Dòng thứ hai là trống và lời giải thích chi tiết nếu có bắt đầu từ dòng thứ ba. Chúng tôi khuyên bạn nên tuân theo quy ước này cho tất cả các tài liệu. Hãy xem ví dụ:\n Tóm tắt    ","date":1586696400,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586696400,"objectID":"c722a155b3e3e61985cbc0684691bdba","permalink":"/courses/python/function/","publishdate":"2020-04-12T20:00:00+07:00","relpermalink":"/courses/python/function/","section":"courses","summary":"Trong bài các khái niệm cơ bản chúng tôi đã có giới thiệu sơ qua về hàm. Bây giờ chúng ta sẽ tìm hiểu kỹ hơn về hàm và các đặc điểm của hàm trong Python.","tags":null,"title":"Cơ bản về hàm","type":"docs"},{"authors":null,"categories":null,"content":"Python cung cấp 1 số đặc điểm, tính năng cho hàm để phục vụ nhu cầu sử dụng khác nhau của chúng ta.\nĐối số mặc định Với những hàm nhiều tham số, nhiều lúc một đối số sẽ nhận một giá trị như nhau, tỉ lệ nhận giá trị khác là không thường xuyên. Lúc này nhu cầu gán sẵn giá trị này cho đối số là nhu cầu cần thiết. Như một số ngôn ngữ khác, Python cung cấp cách khai báo hàm để tạo sẵn các giá trị mặc định cho đối số. Để tạo giá trị mặc định cho đối số, ta khai báo gián giá trị đó cho tham số tương ứng. Ví dụ:\ndef power(x, y=2): \u0026quot;\u0026quot;\u0026quot;Tính x^y\u0026quot;\u0026quot;\u0026quot; return x**y power(5) # 25 power(5, 3) # 125   Hàm power với chức năng tính x^y khai báo với tham số thứ 2 là y được gán giá trị mặc định y=2. Trường hợp gọi power(5) thì lúc này không có đối số y nên Python sẽ cho y nhận giá trị 2. Để tránh nhập nhằng, Python quy định các đối số mặc định phải nằm sau các đối số không mặc định và khi gọi hàm số đối số mặc định sử dụng phải liên tiếp nhau tính từ phải sang. Ví dụ:  def abc(a,b,c=1,d=2): return a+b+c+d abc(1,2) # 6 (c và d lấy gía trị mặc định) abc(1,2,3) # 8 (d lấy giá trị mặc định) abc(1,2,3,4) # 10 abc(1,2,,4) # (Lỗi cú pháp)  ","date":1586728800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586728800,"objectID":"9607f86019462871dda20275b0791d48","permalink":"/courses/python/function-feature/","publishdate":"2020-04-13T05:00:00+07:00","relpermalink":"/courses/python/function-feature/","section":"courses","summary":"Python cung cấp 1 số đặc điểm, tính năng cho hàm để phục vụ nhu cầu sử dụng khác nhau của chúng ta.\nĐối số mặc định Với những hàm nhiều tham số, nhiều lúc một đối số sẽ nhận một giá trị như nhau, tỉ lệ nhận giá trị khác là không thường xuyên.","tags":null,"title":"Đặc điểm hàm Python","type":"docs"},{"authors":["admin"],"categories":["Kiến thức IT"],"content":"Sở hữu một website là nhu cầu không chỉ của công ty, tổ chức mà còn của các cá nhân có nhu cầu chia sẻ thông tin. Thông thường họ sẽ chọn các blog miễn phí để đăng bài bởi các nhà cung cấp blog đã cung cấp nhiều công cụ viết và đăng bài, người dùng chỉ cần quan tâm nội dung thôi.\nHôm nay tôi sẽ giới thiệu một cách làm website đẹp, đa dụng và hoàn toàn miễn phí để các anh chị có nhiều hơn sự lựa chọn bên cạnh blog. Không những vậy, những doanh nghiệp cần trang web đơn giản giới thiệu thông tin công ty có thể sử dụng nó mà không mất chi phí nào.\nGiới thiệu công cụ tạo web tĩnh Web tĩnh là trang web nội dung được tổ chức sẵn hầu như không thay đổi trừ khi người quản lý vào thay đổi nội dung. Web tĩnh cũng hạn chế tương tác với người xem mà chủ yếu chỉ cung cấp các nội dung đã được chuẩn bị trước. Do đó web tĩnh rất phù hợp với những trang web giới thiệu thông tin, công bố các công trình hay viết blog.\nThường các trang web tĩnh chỉ bao gồm các file html mô tả cấu trúc nội dung và file css giúp thay đổi định dạng nội dung như màu sắc, kích cỡ chữ, loại font chữ để giúp trang trông bắt mắt hơn. Đọc đến đây nhiều bạn không rành làm web sẽ sợ nhưng yêu tâm, chúng ta không phải viết những file này đâu. Để giúp chúng ta không phải tự viết html và css thì một số nền tảng tạo web tĩnh ra đời. Các công cụ này cung cấp cách thức tổ chức và viết bài sao cho người không biết lập trình web cũng có thể làm được. Hiện tại những nền tảng tạo web tĩnh phổ biến bao gồm:\n Jekyll: khá phổ biến và có nhiều mẫu giao diện đẹp nhưng do viết bằng ruby nên việc cài đặt hơi phức tạp với người không rành. Khi số lượng trang nhiều lên thì tốc độ tạo trang sẽ ngày càng chậm. Hugo: dễ sử dụng và thời gian tạo trang web siêu nhanh nên viết xong 1 đoạn, quay qua coi nó hiển thị sao sẽ rất tiện. Hugo được viết bằng Go, ngôn ngữ tôi yêu thích. Hexo: viết bằng NodeJS, tạo trang khá nhanh và có nhiều mẫu giao diện và công cụ hỗ trợ. Nhược điểm là cộng đồng đa phần sử dụng tiếng Trung Quốc nên nếu bạn không biết tiếng Hoa thì hơi kẹt. GatsbyJS: cung cấp nhiều công cụ mạnh mẽ nhưng đòi hỏi bạn phải biết lập trình, đặc biệt là ReactJS và GraphQL.  Trang web này sử dụng Hugo và bài này sẽ hướng dẫn cách xây dựng trang web tĩnh với Hugo.\nCài đặt Hugo Hugo hỗ trợ trên nhiều hệ điều hành khác nhau. Phiên bản phát hành có ở đây.\n Trên Windows chúng ta tùy theo phiên bản hệ điều hành là 32bit hay 64bit chúng ta có thể chọn hugo_x.xx.x_Windows-64bit.zip hay hugo_x.xx.x_Windows-64bit.zip. Xả nén chúng ta sẽ có file thực thi hugo.exe. Tốt nhất chúng ta nên tạo 1 thư mục, chẳng hạn C:/hugo rồi chép file này vào và khai báo nó ở biến môi trường Path để dù đứng ở đâu gọi lệnh hugo đều được. Chi tiết ở hình sau:  Trên Linux chúng ta chọn gói phù hợp với bản phân phối, như máy tôi dùng Ubuntu 64bit tôi chọn file hugo_x.xx.x_Linux-64bit.deb. Thực thi file này là xong. Trên macOS các bạn có thể cài qua homebrew hoặc lấy file tương ứng về và tiến hành thực thi.  Để kiểm tra hugo hoạt động đúng sau khi cài đặt, chúng ta mở Terminal (do máy tôi dùng Linux nên tôi nói là mở Terminal. Các bạn dùng Windows phải hiểu là mở Command Prompt (CMD) nhé) rồi gõ hugo version, kết quả hiện phiên bản tương tự như hình sau báo hiệu chúng ta đã cài đặt thành công. Nếu bị lỗi các bạn xem lại hoặc tham khảo thêm ở đây. Tạo website tĩnh với Hugo Mở Terminal, chuyển đến nơi chúng ta muốn đặt thư mục website. Giả sử thư mục website là MySite, chúng ta sẽ gõ lệnh sau trong Terminal để tạo website:\n hugo new site MySite  Chọn giao diện (theme) Như hình trên chúng ta đã thấy là website đã được tạo. Nhưng hiện tại chỉ mới là phần khung. Chúng ta cần chọn một mẫu giao diện để hoàn thiện bộ khung website.\nHugo có hơn 300 theme gồm nhiều chủ đề ở đây. Chúng ta có thể xem từng demo và chọn theme mình thích. Do có nhu cầu chia sẻ kiến thức nên tồi cần theme vừa có blog vừa có dạng tài liệu. Ban đầu tôi chọn docsy nhưng một số bất tiện nên tôi quyết định chuyển sang academic\nĐể lấy theme này chúng ta chọn nút Download ở trang theme rồi khi trang github tương ứng mở ra, chúng ta chọn nút Clone or Download màu xanh, rồi chọn Download ZIP. Sau khi tải về xả nén chúng ta chép thư mục nhận được vào thư mục themes trong thư mục MySite mới tạo ở trên. Tạo thư mục themes nếu trong MySite chưa có. Đổi tên thư mục vừa chép từ hugo-academic-master thành academic.\nTrong các thư mục con của academic có thư mục exampleSite, hãy chép toàn bộ nội dung thư mục này ra thư mục MySite, đồng ý ghi đè các file khi có thông báo.\nChuyển Terminal về thư mục MySite rồi gõ lệnh sau:\n hugo server chúng ta sẽ thấy thông báo như bên dưới báo hiệu việc tạo website đã xong, chúng ta hãy mở trình duyệt và gõ http://localhost:1313/ sẽ thấy điều kỳ diệu xuất hiện. Chúc mừng chúng ta đã có 1 website ngon lành.\n Trong các phần tới tôi sẽ giới thiệu cách tôi xây dựng trang web này. Các bạn có thể rút ra những phần hữu ích để tự mình tạo riêng website cho chính bạn.\nCấu trúc website với theme academic  Bạn nên để hugo chạy để nó cập nhật trang web mỗi khi bạn sửa đổi. Nếu bạn quên cách chạy thì vào thư mục chưa website, như của tôi là Mysite, chạy lệnh sau ở Terminal: hugo server   Trang web với theme academic sẽ gồm các phần sau:\n Trang chủ gồm các phần:  Hero: Phần hiển thị chính khi trang web được mở ra. Trên đó có thiết kế một nút ấn tượng khuyến khích người dùng nhấn vào. Đây là đặc điểm loại trang hero mà academic làm. Tôi hoàn toàn không cần đến nó nên tôi loại bỏ nó bằng cách vào thư mục MySite/content/home/ và sửa file hero.md như sau: chuyển active = true thành active = false. Xem lại trang web sẽ thấy mất phần này. Demo: Đây là phần chứa thông tin cơ bản được làm từ loại trang blank của academic. Tôi sẽ dùng nó để làm phần giới thiệu về website. Nội dung phần này nằm trong file MySite/content/home/demo.md. About: Phần này tự giới thiệu về chủ trang web. Do đây là theme học thuật nên có phần này nhưng tôi không có nhu cầu nên tôi bỏ. Tương tự tôi chuyển active từ true sang false tron file MySite/content/home/about.md. Featurette: Đây là phần giới thiệu các kỹ năng. Tôi thấy có thể tận dụng nó để hiện các lĩnh vực tôi cung cấp nên tôi để lại. Nội dung phần này nằm trong file MySite/content/home/skills.md. Experience: Phần này liệt kê các kinh nghiệm làm việc. Tôi không có nhu cầu xài nên tôi bỏ. Đơn giản chỉ là chuyển active sang false ở file MySite/content/home/experience.md. Accomplishments: Phần này nêu các chứng chỉ, bằng cấp đã đạt được. Tôi bỏ nó do không có nhu cầu. File mô tả nó ở đây: MySite/content/home/accomplishments.md. Posts: Phần này hiện các bài blog mới nhất. Có nhu cầu đó nên tôi giữ lại. Nội dung phần này nằm trong file MySite/content/home/posts.md. Projects: Phần này liệt kê các dự án đã làm. Không có nhu cầu nên tôi chuyển active về false ở file MySite/content/home/projects.md. Gallery: Phần này hiển thị các hình dự án, tôi không có nhu cầu nên bỏ nó ở MySite/content/home/gallery/index.md. Talks: Phần này giới thiệu thông tin các buổi nói chuyện và tôi không có nhu cầu nên tạm thời bỏ nó ở file MySite/content/home/talks.md. Tương tự tôi cũng bỏ phần Publications ở publications.md và featured.md ở cùng thư mục như mấy phần trên. Contact: Phần này tôi giữ lại. Nội dung nó ở file contact.md     ","date":1586494800,"expirydate":-62135596800,"kind":"page","lang":"vi","lastmod":1586494800,"objectID":"21a0ad2c733c53f31e0a53ab4b2c68e7","permalink":"/posts/static-web/","publishdate":"2020-04-10T05:00:00Z","relpermalink":"/posts/static-web/","section":"posts","summary":"Hướng dẫn tạo một trang web tĩnh đẹp và miễn phí với Hugo","tags":["web","blog"],"title":"Làm chủ một trang web miễn phí","type":"posts"}]